package dev.digitaldragon.jobs;

import lombok.Getter;
import org.jetbrains.annotations.NotNull;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.function.Consumer;

/**
 * Run a system command in Bash or PowerShell and handle the logs generated by it. Logs
 * are logged to a StringLogHandler.
 */
public class RunCommand {
    private final String command;
    private final String[] args;
    private final Consumer<String> logger;
    private final File directory;
    @Getter
    private Process process;

    public RunCommand(String command, String[] args, File directory, Consumer<String> logger) {
        this.command = command;
        this.args = args;
        this.directory = directory;
        this.logger = logger;
    }

    /**
     * Executes a command and returns the associated process.
     *
     * @return the Process object that was created by executing the command, or null if an IOException occurs
     */
    public Process run() {
        try {

            ProcessBuilder processBuilder;
            if (args != null) {
                processBuilder = getExecutingProcess(args, directory);
                logger.accept("----- Bot: command: " + Arrays.toString(args) + " -----");
            } else if (command != null) {
                processBuilder = getExecutingProcess(command, directory);
                logger.accept("----- Bot: command: " + command + " -----");
            } else {
                throw new IllegalArgumentException("Command and args cannot both be null");
            }
            processBuilder.redirectErrorStream(true);
            handleLogs(processBuilder);
            return process;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Handles the logs generated by a process.
     *
     * @param processBuilder  the processbuilder to execute
     * @throws IOException if an I/O error occurs
     */
    public void handleLogs(ProcessBuilder processBuilder) throws IOException {
        process = processBuilder.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8));
        StringBuilder logBuilder = new StringBuilder();
        int c;
        while ((c = reader.read()) != -1) {
            char character = (char) c;

            // Handle both '\n' and '\r' as newline characters
            if (character == '\n' || character == '\r') {
                String logLine = logBuilder.toString(); // Get the completed line
                logger.accept(logLine);
                logBuilder = new StringBuilder(); // Reset the StringBuilder for the next line

            } else {
                logBuilder.append(character); // Add the character to the current line
            }
        }

        // After the loop, check if there's an incomplete line to add
        if (!logBuilder.isEmpty()) {
            String logLine = logBuilder.toString();
            logger.accept(logLine);
        }
    }

    public int waitFor() {
        try {
            int exitCode = process.waitFor();
            logger.accept("----- Bot: Exit code: " + exitCode + " -----");
            return exitCode;
        } catch (InterruptedException e) {
            LoggerFactory.getLogger(RunCommand.class).error("Error waiting for process", e);
            logger.accept("----- Bot: Error waiting for process -----");
        }
        logger.accept("----- Bot: Something went wrong... -----");
        logger.accept("This error likely originates from somewhere within wikibot. Please report this!");

        return 999;
    }

    /**
     * Creates a process to execute a command in Powershell or Bash based on operating system.
     *
     * @param command  the command to be executed
     * @param dumpsDir the directory where the process will be executed
     * @return the executing process
     * @throws IOException if an I/O error occurs
     * @throws UnsupportedOperationException if the operating system is not supported
     */
    @NotNull
    public static ProcessBuilder getExecutingProcess(String command, File dumpsDir) throws IOException {
        ProcessBuilder processBuilder;
        String os = System.getProperty("os.name").toLowerCase();

        if (os.contains("win")) { // For Windows
            processBuilder = new ProcessBuilder("cmd.exe", "/c", command);
        } else if (os.contains("nix") || os.contains("nux") || os.contains("mac")) { //For Unix-based
            processBuilder = new ProcessBuilder("/bin/bash", "-c", command);
        } else {
            throw new UnsupportedOperationException("Unsupported operating system: " + os);
        }
        processBuilder.directory(dumpsDir);
        processBuilder.redirectErrorStream(true);

        return processBuilder;
    }

    public static ProcessBuilder getExecutingProcess(String[] args, File dumpsDir) throws IOException {
        ProcessBuilder processBuilder = new ProcessBuilder(args);
        processBuilder.directory(dumpsDir);
        processBuilder.redirectErrorStream(true);
        return processBuilder;
    }
}
